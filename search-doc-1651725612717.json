[{"title":"InternalClass","type":0,"sectionRef":"#","url":"api/InternalClass","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#Name","content":"since v1.0.0 &lt;/&gt; InternalClass.Name: string The name of the object's class. "},{"title":"Functions​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#functions","content":" "},{"title":"Extend​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#Extend","content":"since v1.0.0 &lt;/&gt; InternalClass:Extend( NewObject: table-- The table that is being turned into a Class. ) → NewClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Applies metatable to NewObject and verifies that all properties of InternalClass has been applied to it.  "},{"title":"New​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#New","content":"since v1.1.0 &lt;/&gt; InternalClass:New( ClassName: string,-- The name of the class being created. Name: string,-- The name of the object being created. Version: string ) → NewInternalClass-- Returns an object with the ClassName of &quot;ClassName&quot; and Name of &quot;Name&quot;. Creates a new InternalClass object with the ClassName of &quot;ClassName&quot; and Name of &quot;Name&quot;.  "},{"title":"Destroy​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#Destroy","content":"since v1.0.0 &lt;/&gt; InternalClass:Destroy() → () Destroy the BaseClass Object to clear up memory.  "},{"title":"NewFromTable​","type":1,"pageTitle":"InternalClass","url":"api/InternalClass#NewFromTable","content":"deprecated in v1.1.0 &lt;/&gt; This was deprecated in v1.1.0 Removed as [InternalClass:Extend] functionally does the same thing. InternalClass:NewFromTable( Table: table, ClassName: string,-- The name of the class being created. Name: string, Version: string ) → NewClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Creates a new Class object from a premade table with a ClassName of &quot;ClassName&quot;. "},{"title":"First Post","type":0,"sectionRef":"#","url":"blog/firstpost","content":"Hey! This is my first post! The next step I need to take for this framework to reach the &quot;complete state&quot; is the ability to add your own classes, datatypes, and services to the framework without needing to make a forked version. I plan on doing this by expanding upon the ClassService and the core Arcaneum module with methods that allow this to happen.","keywords":""},{"title":"Utilities","type":0,"sectionRef":"#","url":"api/Utilities","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utilities","url":"api/Utilities#functions","content":" "},{"title":"pcall​","type":1,"pageTitle":"Utilities","url":"api/Utilities#pcall","content":"&lt;/&gt; Utilities:pcall( callback: function,-- The function that you want to be called by the pcall method. ErrorMsg: string,-- The Error label used in the warning message, if there were to be one. ...: any-- The parameters passed into the callback. ) → boolean,any-- Returns if the callback successfully executed, alongside anything it returned. A pcall function with a prebuilt message in the format of &quot;ErrorMsg: Result \\n traceback&quot;  "},{"title":"error​","type":1,"pageTitle":"Utilities","url":"api/Utilities#error","content":"&lt;/&gt; Utilities:error( ErrorMsg: string-- The Error message that will be displayed. ) → nil An error function that creates an error message without killing the thread it was called in  "},{"title":"RemoveFromTable​","type":1,"pageTitle":"Utilities","url":"api/Utilities#RemoveFromTable","content":"&lt;/&gt; Utilities:RemoveFromTable( TargetTable: table,-- The table of which would be searched and have the object removed from. ThingToRemove: any-- The object of which you want to remove from the table. ) → boolean-- Returns if it actually removed the item. A quick table.remove(table.find) method that would try to find your object in the TargetTable and remove it, if it exists.  "},{"title":"GetAttributeFromInstances​","type":1,"pageTitle":"Utilities","url":"api/Utilities#GetAttributeFromInstances","content":"&lt;/&gt; Utilities:GetAttributeFromInstances( AttributeName: string,-- The name of the Attribute to get from the inputted instances. DefaultValue: any,-- The default value incase the inputted instance doesn't have the Attribute. ...: Instance -- The Instances that will be checked for the attribute. ) → ...any-- The values of the attributes retrieved from the inputted Instances. Used to get a specific attribute from a set of instances, setting a default value for the output if the instance doesn't have the attribute. The output will return attribute values in the order of which they are inputted into the function.  "},{"title":"ModulesToTable​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ModulesToTable","content":"&lt;/&gt; Utilities:ModulesToTable( ObjectTable: table, BaseOutput: table?, Overwrite: boolean? ) → Dictionary Used to turn a table of modules (commonly obtained through Instance:GetChildren()) into a dictionary that contains the each module, with the names of each module representing the key to said modules.  "},{"title":"ImportModule​","type":1,"pageTitle":"Utilities","url":"api/Utilities#ImportModule","content":"&lt;/&gt; Utilities:ImportModule( Start: Instance , ...: string ) → any-- The output of the module via require(module), assuming the module exists. Safely imports a module using traditional syntax such as &quot;script.Parent.InstanceName.InstanceName.InstanceName.etc&quot;, but ensures each object in the index exists through WaitForChild functions. If successful, it will require that module and return the contents of said module. "},{"title":"ArcaneumGlobals","type":0,"sectionRef":"#","url":"api/ArcaneumGlobals","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals#functions","content":" "},{"title":"AddGlobal​","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals#AddGlobal","content":"&lt;/&gt; ArcaneumGlobals:AddGlobal( Data: ModuleScript | T,-- The data to be saved to the global. Can be any non-instance or a ModuleScript. Name: string?-- A string that will be associated with the new global. It should be unique within the environment. Optional if Data is a ModuleScript. ) → Data-- The data that has been put into the method. Returns ModuleScript's contents if Data is a ModuleScript. Adds a global into the global environment. If it is a ModuleScript, set its parent to be the Global's script.  "},{"title":"SetGlobal​","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals#SetGlobal","content":"&lt;/&gt; ArcaneumGlobals:SetGlobal( Data: T,-- The data to be saved to the global. Name: string?-- A string that will be associated with the new global. It should be unique within the environment. ) → Data-- The data that has been put into the method and saved as a global. Sets a global into the global environment with the key of Name. "},{"title":"Errors","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals##","content":"Type\tDescription&quot;No name was passed into SetGlobal&quot;\tOccurs when SetGlobal is called and there is no name inputted as a parameter. &quot;Overriding Global [Name]!&quot;\tOccurs when SetGlobal is used and there was a previous global in that position.  "},{"title":"GetGlobal​","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals#GetGlobal","content":"&lt;/&gt; ArcaneumGlobals:GetGlobal( Name: string-- A string that will be associated with the new global. It should be unique within the environment. ) → Data-- The data that has been put into the method and saved as a global. Gets a global from the global environment with the key of Name. "},{"title":"Errors","type":1,"pageTitle":"ArcaneumGlobals","url":"api/ArcaneumGlobals##","content":"Type\tDescription&quot;No name was passed into GetGlobal&quot;\tOccurs when GetGlobal is called and there is no name inputted as a parameter. "},{"title":"Class","type":0,"sectionRef":"#","url":"api/Class","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Class","url":"api/Class#properties","content":" "},{"title":"Connections​","type":1,"pageTitle":"Class","url":"api/Class#Connections","content":"since v1.0.0 &lt;/&gt; Class.Connections: table A table containing all existing connections to this object. "},{"title":"Functions​","type":1,"pageTitle":"Class","url":"api/Class#functions","content":" "},{"title":"Extend​","type":1,"pageTitle":"Class","url":"api/Class#Extend","content":"since v1.0.0 &lt;/&gt; Class:Extend( NewObject: table-- The table that is being turned into a Class. ) → NewClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Applies metatable to NewObject and verifies that all properties of Class has been applied to it.  "},{"title":"New​","type":1,"pageTitle":"Class","url":"api/Class#New","content":"since v1.1.0 &lt;/&gt; Class:New( ClassName: string,-- The name of the class being created. Version: string ) → NewClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Creates a new Class object with a ClassName of &quot;ClassName&quot;.  "},{"title":"AddConnection​","type":1,"pageTitle":"Class","url":"api/Class#AddConnection","content":"&lt;/&gt; Class:AddConnection( ConnectionKey: any,-- The reference of which the Connection will be assoiated with. Connection: RBXScriptConnection -- The connection returned by a RBXScriptSignal:Connect(). ) → () Adds a connection to the Connections dictionary with inputted key so it can be disconnected later (either automatically on Class:Destroy or manually on Class:RemoveConnection).  "},{"title":"RemoveConnection​","type":1,"pageTitle":"Class","url":"api/Class#RemoveConnection","content":"&lt;/&gt; Class:RemoveConnection( ConnectionKey: any-- The reference of which the Connection will be assoiated with. ) → () Removes a connection from the Connections dictionary with inputted key.  "},{"title":"Destroy​","type":1,"pageTitle":"Class","url":"api/Class#Destroy","content":"&lt;/&gt; Class:Destroy() → () Destroy the Class Object to clear up memory.  "},{"title":"NewFromTable​","type":1,"pageTitle":"Class","url":"api/Class#NewFromTable","content":"deprecated in v1.1.0 &lt;/&gt; This was deprecated in v1.1.0 Removed as [Class:Extend] functionally does the same thing. Class:NewFromTable( Table: table, ClassName: string,-- The name of the class being created. Version: string ) → NewClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Creates a new Class object from a premade table with a ClassName of &quot;ClassName&quot;. "},{"title":"DataType","type":0,"sectionRef":"#","url":"api/DataType","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"DataType","url":"api/DataType#types","content":" "},{"title":"DataType​","type":1,"pageTitle":"DataType","url":"api/DataType#DataType","content":"&lt;/&gt; interface DataType { new: (...) → (self) __tostring: (self) → (string) __concat: ( any, any ) → (string) __eq: ( self, any ) → (boolean) lt: ( self, any ) → (boolean) le: ( self, any ) → (boolean) }  "},{"title":"Progress Report 1","type":0,"sectionRef":"#","url":"blog/PR1","content":"I added some more functionality to ClassService so any new classes made outside of the framework can be added into it without much hastle (and still be able to be referenced in a logical way). I'll have to experiment with this more, and test these new changes. However, for this to work, I needed to add a &quot;self reference&quot; for each of the classes, of which adds a new property under every class called &quot;CoreModule.&quot; I updated each class version, and found that although the version system was useful, it was sadly hindered by the fact that all of my CheckVersions weren't written in the same way so Ctrl-F could find them all. Thus I made all of them uniform, such that it follows the format of \\n (ClassName):CheckVersion(). It made more changes A LOT easier from that point on. After this, I added the ParentClass argument to [ClassService:AddClassModule] and a new helper function of [ClassService:SetClassParent], under the case that a module would need to be moved again for whatever reason. I also added an &quot;AddOn&quot; section for the ClassService if a new module doesn't exactly belong under a class, but also doesn't belong under anything else outside of a class.","keywords":""},{"title":"Progress Report 2","type":0,"sectionRef":"#","url":"blog/PR2","content":"Finally figured out the required logic to get the TestInfoInterface to throw a warning if the metamethod wasn't &quot;overriden.&quot; Currently writing tests for this, considering how fundamental datatypes are (and hopefully will be). I realized that the perspective modules (Server and Client) don't exactly have the best &quot;AddOn&quot; functionality, and the &quot;Shared&quot; environment variables in each perspective run the risk of accidentally putting the modules into the Global Module, which would be bad for the Server especially. This is next on the to-do list. Time's going pretty fast. It's hard to describe how to use this framework, I need to find an outside perspective that's willing to work with me on documenting the usage. Considering the upcoming deadline for tests, I'm not sure if I'll be able to get everything that I want done. Technically this framework is in a working state, so perhaps some of the features could be cut in favor of getting something done for my presentation.","keywords":""},{"title":"BaseClass","type":0,"sectionRef":"#","url":"api/BaseClass","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#properties","content":" "},{"title":"ClassName​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#ClassName","content":"since v1.0.0 &lt;/&gt; BaseClass.ClassName: string The name of the object's class.  "},{"title":"Version​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#Version","content":"since v1.0.0 &lt;/&gt; BaseClass.Version: string A string in Semantic Versioning format that represents the class's current version.  "},{"title":"CoreModule​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#CoreModule","content":"since v1.2.0 &lt;/&gt; BaseClass.CoreModule: ModuleScript  The script itself for easy access outside of the script. "},{"title":"Functions​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#functions","content":" "},{"title":"Extend​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#Extend","content":"since v1.0.0 &lt;/&gt; BaseClass:Extend( NewObject: table-- The table you want to set the __index metatable to. ) → table-- Returns the table with the index set to itself. This is a very fancy function that sets the index of the table so you don't need to repeatedly .__index and setmetatable.  "},{"title":"New​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#New","content":"since v1.1.0 &lt;/&gt; BaseClass:New( ClassName: string,-- The name of the class being created. Version: string-- The name version of the class being created. ) → NewBaseClass-- Returns an object with the ClassName of &quot;ClassName&quot;. Creates a new BaseClass object with a ClassName of &quot;ClassName&quot;.  "},{"title":"CheckVersion​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#CheckVersion","content":"since v1.0.0 &lt;/&gt; BaseClass:CheckVersion( VersionUsed: Version | string-- The version of the class that the code has used. ) → self-- Returns the object itself for easily checks on initialization. Checks if the inputted version is the class's current version. If not, put a message on the console. "},{"title":"Errors","type":1,"pageTitle":"BaseClass","url":"api/BaseClass##","content":"Type\tDescription&quot;Code was expecting a version of 'ClassName' that was never released! Errors are likely to occur!&quot;\tOccurs when the inputted version has is a newer version than the class itself. Should check to ensure nothing breaks. &quot;Code was using a significantly older version of 'ClassName'. Errors are likely to occur!&quot;\tOccurs when the inputted version has an older major update. Should check to ensure nothing breaks. &quot;Code was using an older version of 'ClassName'. Check for possible deprecations!&quot;\tOccurs when the inputted version has an older minor update. Should ensure deprecated code gets updated. &quot;Code was using an older patch of 'ClassName'. Check for possible deprecations.&quot;\tOccurs when the inputted version has an older patch. Can ignore.  "},{"title":"Destroy​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#Destroy","content":"since v1.0.0 &lt;/&gt; BaseClass:Destroy() → () Destroy the BaseClass Object to clear up memory.  "},{"title":"NewFromTable​","type":1,"pageTitle":"BaseClass","url":"api/BaseClass#NewFromTable","content":"deprecated in v1.1.0 &lt;/&gt; This was deprecated in v1.1.0 Removed as [BaseClass:Extend] functionally does the same thing. BaseClass:NewFromTable( Table: table,-- The name of the class being created. ClassName: string?, Version: string? ) → NewBaseClass-- Returns an object with the ClassName of &quot;ClassName&quot;. A wrapper for BaseClass:Extend. "},{"title":"Version","type":0,"sectionRef":"#","url":"api/Version","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Version","url":"api/Version#properties","content":" "},{"title":"MajorVersion​","type":1,"pageTitle":"Version","url":"api/Version#MajorVersion","content":"&lt;/&gt; Version.MajorVersion: number The number representing which major version is represented. Different major versions indicate &quot;when you make incompatible API changes.&quot;  "},{"title":"MinorVersion​","type":1,"pageTitle":"Version","url":"api/Version#MinorVersion","content":"&lt;/&gt; Version.MinorVersion: number The number representing which minor version is represented. Different minor versions indicate &quot;when you add functionality in a backwards compatible manner.&quot;  "},{"title":"PatchVersion​","type":1,"pageTitle":"Version","url":"api/Version#PatchVersion","content":"&lt;/&gt; Version.PatchVersion: number The number representing which patch version is represented. Different patch versions indicate &quot;when you make backwards compatible bug fixes.&quot; "},{"title":"Functions​","type":1,"pageTitle":"Version","url":"api/Version#functions","content":" "},{"title":"__concat​","type":1,"pageTitle":"Version","url":"api/Version#__concat","content":"Metamethod &lt;/&gt; Version.__concat( value1: any, value2: any ) → string-- Concatinates values via &quot;string.format(&quot;%s%s&quot;,tostring(value1),tostring(value2))&quot;   "},{"title":"new​","type":1,"pageTitle":"Version","url":"api/Version#new","content":"&lt;/&gt; Version.new( MajorVersion: string-- A string in the format of &quot;[Version.MajorVersion].[Version.MinorVersion].[Version.PatchVersion]&quot;. ) → Version-- A new version object. Creates a new Version datatype object from Version.fromString  "},{"title":"new​","type":1,"pageTitle":"Version","url":"api/Version#new","content":"&lt;/&gt; Version.new( MajorVersion: number,-- The number representing which MajorVersion the new object has. MinorVersion: number,-- The number representing which MinorVersion the new object has. PatchVersion: number-- The number representing which PatchVersion the new object has. ) → Version-- A new version object. Creates a new Version datatype object.  "},{"title":"fromString​","type":1,"pageTitle":"Version","url":"api/Version#fromString","content":"&lt;/&gt; Version.fromString( String: string-- A string in the format of &quot;[Version.MajorVersion].[Version.MinorVersion].[Version.PatchVersion]&quot;. ) → Version-- A new version object. Creates a new Version datatype object.  "},{"title":"getNumbersFromString​","type":1,"pageTitle":"Version","url":"api/Version#getNumbersFromString","content":"&lt;/&gt; Version.getNumbersFromString( String: string-- A string in the format of &quot;[Version.MajorVersion].[Version.MinorVersion].[Version.PatchVersion]&quot;. ) → number,number,number-- The numbers representing the respective versions (MajorVersion,MinorVersion, and PatchVersion respectively). Gets the version numbers from the inputted string and returns them in the order of MajorVersion, MinorVersion, and PatchVersion.  "},{"title":"__tostring​","type":1,"pageTitle":"Version","url":"api/Version#__tostring","content":"Metamethod &lt;/&gt; Version:__tostring() → string-- Returns in the format of &quot;[Version.MajorVersion].[Version.MinorVersion].[Version.PatchVersion]&quot;.   "},{"title":"__eq​","type":1,"pageTitle":"Version","url":"api/Version#__eq","content":"Metamethod &lt;/&gt; Version:__eq(value: Version) → boolean-- Compares both Versions and returns if MajorVersion, MinorVersion, and PatchVersion are the same numbers.   "},{"title":"__lt​","type":1,"pageTitle":"Version","url":"api/Version#__lt","content":"Metamethod &lt;/&gt; Version:__lt(value: Version) → boolean-- Compares both Versions and returns if the current object has precedence over the next Version object. Refer to Specification #11 of Semantic Versioning 2.0.0.   "},{"title":"__le​","type":1,"pageTitle":"Version","url":"api/Version#__le","content":"Metamethod &lt;/&gt; Version:__le(value: Version) → boolean-- Compares both Versions and returns if the current object has precedence over or is equal to the next Version object. Uses Version:__eq and Version:__lt.   "},{"title":"GetMajorVersion​","type":1,"pageTitle":"Version","url":"api/Version#GetMajorVersion","content":"&lt;/&gt; Version:GetMajorVersion() → number-- Version.MajorVersion Returns the Version's Major Version.  "},{"title":"GetMinorVersion​","type":1,"pageTitle":"Version","url":"api/Version#GetMinorVersion","content":"&lt;/&gt; Version:GetMinorVersion() → number-- Version.MinorVersion Returns the Version's Minor Version.  "},{"title":"GetPatchVersion​","type":1,"pageTitle":"Version","url":"api/Version#GetPatchVersion","content":"&lt;/&gt; Version:GetPatchVersion() → number-- Version.PatchVersion Returns the Version's Patch Version.  "},{"title":"Destroy​","type":1,"pageTitle":"Version","url":"api/Version#Destroy","content":"&lt;/&gt; Version:Destroy() → nil Destroys the object to clean up memory. "},{"title":"Landing","type":0,"sectionRef":"#","url":"docs/intro","content":"Landing None yet :D","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/How To Use Arcaneum/Getting Started","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Getting Started","url":"docs/How To Use Arcaneum/Getting Started#prerequisites","content":"To effectively use this framework, it is expected for your development workspace to be powered by Rojo v6.2.0. Alongside that, an optional tool you should consider having is Moonwave, which is used to document each of the systems and APIs included in the framework. "},{"title":"Setting up the Environment​","type":1,"pageTitle":"Getting Started","url":"docs/How To Use Arcaneum/Getting Started#setting-up-the-environment","content":"There are two methods of setting up your rojo project to use the Arcaneum Framework: Arcaneum as a &quot;Foundation&quot; or Arcaneum as a &quot;Package&quot;. "},{"title":"Arcaneum as a \"Foundation\"​","type":1,"pageTitle":"Getting Started","url":"docs/How To Use Arcaneum/Getting Started#arcaneum-as-a-foundation","content":"This method is the ideal route if you're starting from scratch and don't want to deal with immediate updates. To do this, simply download the repository and use the development.project.json file as your default project file. "},{"title":"Arcaneum as a \"Package\"​","type":1,"pageTitle":"Getting Started","url":"docs/How To Use Arcaneum/Getting Started#arcaneum-as-a-package","content":"In order to use this framework in your games/projects, you will need to either download, clone, or add the repo as a submodule into a folder that represents ServerStorage in the rojo environment. "},{"title":"Q&A","type":0,"sectionRef":"#","url":"docs/How To Use Arcaneum/Q&A","content":"","keywords":""},{"title":"Why was Arcaneum made?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#why-was-arcaneum-made","content":"Arcaneum was made as a response to working in projects that quickly turned into Big Balls of Mud.. The following factors caused this to happen: Monolith scripts acting as a universal service composed of multiple systems within itself Reduced the viability of implementing any automated tests No unit testing of core/repeated systemsConvoluted system interactions such that changing one system is likely to break or neglect multiple other systemsRepeated code and systems in multiple scripts make maintaining and updating those codes a hastle "},{"title":"Why should you use Arcaneum?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#why-should-you-use-arcaneum","content":"Arcaneum is a framework that provides modules that allow for Object Oriented Programming style code to be made. Alongside that, minor utilities are included to help manage the many services and instances that ROBLOX provides in its environment. "},{"title":"Basics of making a new custom class​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#basics-of-making-a-new-custom-class","content":""},{"title":"What is a class?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#what-is-a-class","content":"A class is a template that defines what something is and how it functions. It is commonly used to create &quot;Objects,&quot; which is the "},{"title":"What is it in Arcaneum?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#what-is-it-in-arcaneum","content":"A class in an Arcaneum sense is a table that will be used as a foundation by other modules. Usage of Arcaneum's fundamental classes​ Arcaneum comes with five fundamental classes: [BaseClass] [DataType][Class] [InternalClass][ExternalClass] Each of these classes serve unique purposes to help manage varying functionality and memory usage. The [BaseClass] is the foundation of every class in the framework. Classes derived from this are expected to NOT interact with any ROBLOX services. It is expected for a ClassName, Version, and CoreModule to be present, and offers the functionality for Extending, Version Verification, and Destroying (garbage control). Examples of systems made from this would be utility and singleton classes. [Class] is a class that is derived from [BaseClass], and was created for systems that would need to manage [RBXScriptConnections]. Anything extended from this will be provided with the [AddConnection] and [RemoveConnection] methods, which will allow you to manage your RBXScriptConnections within your class without worrying about the logistics to disconnect them. All connections in a Class object will be disconnected if said object were to be destroyed. "},{"title":"How is inheritance done in Arcaneum?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#how-is-inheritance-done-in-arcaneum","content":"Inheritance is done by &quot;extending&quot; from the base class using the &quot;Extend&quot; method. "},{"title":"Basics of making a new DataType​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#basics-of-making-a-new-datatype","content":""},{"title":"What is a DataType​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#what-is-a-datatype","content":"A low level object used to represent information that can be compared to other things of the same datatype. A class that is meant to be compared to other objects of the same class. "},{"title":"Examples of a custom DataType​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#examples-of-a-custom-datatype","content":""},{"title":"Basics of creating services from classes​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#basics-of-creating-services-from-classes","content":""},{"title":"What is a service?​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#what-is-a-service","content":""},{"title":"Testing Your Code​","type":1,"pageTitle":"Q&A","url":"docs/How To Use Arcaneum/Q&A#testing-your-code","content":"Arkaneum comes with a Test module that allows you to test code with ease. When "},{"title":"First Steps","type":0,"sectionRef":"#","url":"docs/Setup Dev Environment/intro","content":"","keywords":""},{"title":"Dependacies​","type":1,"pageTitle":"First Steps","url":"docs/Setup Dev Environment/intro#dependacies","content":"This project was developed using the following: Visual Studio CodeVisual Studio Code Extensions: Rojo v6.2.0SeleneRoblox LSPStyLua Tools: MoonwaveForeman (Optional) Installs wally, run-in-roblox.exe, and rojo.exe Wally (Optional) "},{"title":"testpage1","type":0,"sectionRef":"#","url":"docs/TestingDocs/testpage1","content":"testpage1","keywords":""},{"title":"Working with Arcaneum","type":0,"sectionRef":"#","url":"docs/SystemExplainations/Usage","content":"Working with Arcaneum In order to use Arcaneum, you must require the Arcaneum module with a script that has access to ServerStorage. It will then set up the runtime environment which can be interacted with by requiring those modules.","keywords":""},{"title":"File Locations","type":0,"sectionRef":"#","url":"docs/SystemExplainations/Runtime Environment","content":"File Locations Upon requiring the ArcaneumEngine module on the server, it will set up the locations for each sub-module, splitting such that the &quot;Global&quot; module is placed into ReplicatedStorage and renamed to &quot;Arcaneum.&quot; This allows other scripts to access the globals at any given time via ReplicatedStorage.Arcaneum. When a player joins the server, the [PlayerManager] will copy the ArcaneumEngine module","keywords":""},{"title":"testpage2","type":0,"sectionRef":"#","url":"docs/TestingDocs/testpage2","content":"testpage2","keywords":""},{"title":"ClassService","type":0,"sectionRef":"#","url":"api/ClassService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClassService","url":"api/ClassService#functions","content":" "},{"title":"SetClass​","type":1,"pageTitle":"ClassService","url":"api/ClassService#SetClass","content":"since 1.0.0 &lt;/&gt; ClassService:SetClass( ClassName: string,-- The name of the class being added. ClassData: any-- The data of the class being added. ) → any-- The class itself. Adds the class into the Classes cache so it can be retrieved via [ClassSerivce:GetClass].  "},{"title":"SetClassParent​","type":1,"pageTitle":"ClassService","url":"api/ClassService#SetClassParent","content":"since 1.1.0 &lt;/&gt; ClassService:SetClassParent( ClassModule: ModuleScript ,-- The ModuleScript to be moved. ParentClass: string-- The class which the ClassModule should be parented under. If &quot;AddOn&quot; is put in, it will instead be put into the AddOns folder. ) → () Sets the ClassModule's parent to be the ParentClass's modulescript. "},{"title":"Errors","type":1,"pageTitle":"ClassService","url":"api/ClassService##","content":"Type\tDescription&quot;Attempted to add ClassModule to a class ([ParentClass]) that hasn't been made yet!&quot;\tOccurs when the ParentClass doesn't exist in the service. &quot;[ParentClass].CoreModule is nil!&quot;\tOccurs when the ParentClass doesn't have a CoreModule property.  "},{"title":"AddClassModule​","type":1,"pageTitle":"ClassService","url":"api/ClassService#AddClassModule","content":"since 1.1.0 &lt;/&gt; ClassService:AddClassModule( ClassModule: ModuleScript ,-- The ModuleScript with the name of the class and contains the ClassData when required. ParentClass: string?-- The class which the ClassModule should be parented under. If &quot;AddOn&quot; is put in, it will instead be put into the AddOns folder. ) → table-- The class itself. A wrapper for ClassService:AddClass where you pass in a ModuleScript with the class data instead.  "},{"title":"GetClass​","type":1,"pageTitle":"ClassService","url":"api/ClassService#GetClass","content":"since 1.0.0 &lt;/&gt; ClassService:GetClass( ClassName: string-- The name of the requested class. ) → any-- The class itself, if it exists. Returns the requested class, if it exists. "},{"title":"BallisticsFunctions","type":0,"sectionRef":"#","url":"api/BallisticsFunctions","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#types","content":" "},{"title":"LookVector​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#LookVector","content":"&lt;/&gt; type LookVector = Vector3  A unit Vector3 that is equivalent to CFrame.LookVector.  "},{"title":"AverageHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#AverageHitPosition","content":"&lt;/&gt; type AverageHitPosition = Vector3  A Vector3 where the projectile and the target will collide.  "},{"title":"PositionAccuracy​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#PositionAccuracy","content":"&lt;/&gt; type PositionAccuracy = number A number that shows how far off the average is from the projected target collision positions due to calculation incaccuracies.  "},{"title":"SimulatedHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#SimulatedHitPosition","content":"&lt;/&gt; type SimulatedHitPosition = Vector3  The projected target collision position via: HitPosition = TargetInitialPosition + TargetVelocityTravelTime + TargetAcceleration/2TravelTime^2 + TargetJerk/3*TravelTime^3.  "},{"title":"ProjectedHitPosition​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#ProjectedHitPosition","content":"&lt;/&gt; type ProjectedHitPosition = Vector3  The projected projectile collision position via: HitPosition = ShooterInitialPosition + ((SimulationLookVectorProjectileSpeed + ShooterVelocity)TravelTime) + ShooterAcceleration/2TravelTime^2 + ShooterJerk/3TravelTime^3. "},{"title":"Functions​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#functions","content":" "},{"title":"GetHitInfo​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitInfo","content":"Untested since v0.2.1 &lt;/&gt; BallisticsFunctions:GetHitInfo( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? -- The (initial) velocity of the target. ) → LookVector?,AverageHitPosition?,PositionAccuracy?,SimulatedHitPosition?,ProjectedHitPosition?-- Returns nil if there isn't a valid hit direction. A function that computes the LookVector and HitPosition from ProjectileSpeed, Positions, Velocities, and Acceleration. Refer to BallisticsFunctions:GetHitInfoWithJerk to compute with Jerk.  "},{"title":"GetHitInfoWithJerk​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitInfoWithJerk","content":"Untested since v0.2.1 &lt;/&gt; BallisticsFunctions:GetHitInfoWithJerk( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. ShooterJerk: Vector3? ,-- The jerk (rate of change of acceleration) of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? ,-- The (initial) velocity of the target. TargetJerk: Vector3? -- The jerk (rate of change of acceleration) of the target. ) → LookVector?,AverageHitPosition?,PositionAccuracy?,SimulatedHitPosition?,ProjectedHitPosition?-- Returns nil if there isn't a valid hit direction. A function that computes the LookVector and HitPosition from ProjectileSpeed, Positions, Velocities, Acceleration, and Jerk.  "},{"title":"GetHitTimes​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitTimes","content":"since v0.2.0 &lt;/&gt; BallisticsFunctions:GetHitTimes( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? -- The (initial) velocity of the target. ) → ...number-- The times of when the projectile and target can collide. A function that computes the times of collision from ProjectileSpeed, Positions, Velocities, and Acceleration. Refer to BallisticsFunctions:GetHitTimesWithJerk to compute with Jerk.  "},{"title":"GetHitTimesWithJerk​","type":1,"pageTitle":"BallisticsFunctions","url":"api/BallisticsFunctions#GetHitTimesWithJerk","content":"since v0.2.0 &lt;/&gt; BallisticsFunctions:GetHitTimesWithJerk( ProjectileSpeed: number,-- The initial speed of the projectile. ShooterPosition: Vector3 ,-- The (initial) position of the projectile/shooter. ShooterVelocity: Vector3? ,-- The (initial) velocity of the projectile/shooter. ShooterAcceleration: Vector3? ,-- The (initial) acceleration of the projectile/shooter. ShooterJerk: Vector3? ,-- The jerk (rate of change of acceleration) of the projectile/shooter. TargetPosition: Vector3 ,-- The (initial) position of the target. TargetVelocity: Vector3? ,-- The (initial) velocity of the target. TargetAcceleration: Vector3? ,-- The (initial) velocity of the target. TargetJerk: Vector3? -- The jerk (rate of change of acceleration) of the target. ) → ...number-- The times of when the projectile and target can collide. A function that computes the times of collision from ProjectileSpeed, Positions, Velocities, Acceleration, and Jerk. "}]