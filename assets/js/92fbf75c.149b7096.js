"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[542],{15816:function(e){e.exports=JSON.parse('{"functions":[{"name":"__tostring","desc":"","params":[],"returns":[{"desc":"Returns in the format of \\"[[Version.MajorVersion]].[[Version.MinorVersion]].[[Version.PatchVersion]]\\".","lua_type":"string"}],"function_type":"method","tags":["Metamethod"],"source":{"line":38,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"__concat","desc":"","params":[{"name":"value1","desc":"","lua_type":"any"},{"name":"value2","desc":"","lua_type":"any"}],"returns":[{"desc":"Concatinates values via \\"string.format(\\"%s%s\\",tostring(value1),tostring(value2))\\"","lua_type":"string"}],"function_type":"static","tags":["Metamethod"],"source":{"line":45,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"__eq","desc":"","params":[{"name":"value","desc":"","lua_type":"Version"}],"returns":[{"desc":"Compares both Versions and returns if MajorVersion, MinorVersion, and PatchVersion are the same numbers.","lua_type":"boolean"}],"function_type":"method","tags":["Metamethod"],"source":{"line":52,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"__lt","desc":"","params":[{"name":"value","desc":"","lua_type":"Version"}],"returns":[{"desc":"Compares both Versions and returns if the current object has precedence over the next Version object. Refer to [Specification #11 of Semantic Versioning 2.0.0](https://semver.org/#spec-item-11).","lua_type":"boolean"}],"function_type":"method","tags":["Metamethod"],"source":{"line":61,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"__le","desc":"","params":[{"name":"value","desc":"","lua_type":"Version"}],"returns":[{"desc":"Compares both Versions and returns if the current object has precedence over or is equal to the next Version object. Uses [Version:__eq] and [Version:__lt].","lua_type":"boolean"}],"function_type":"method","tags":["Metamethod"],"source":{"line":79,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"new","desc":"    \\nCreates a new Version datatype object from [Version.fromString]","params":[{"name":"MajorVersion","desc":"A string in the format of \\"[[Version.MajorVersion]].[[Version.MinorVersion]].[[Version.PatchVersion]]\\".","lua_type":"string"}],"returns":[{"desc":"A new version object.","lua_type":"Version"}],"function_type":"static","source":{"line":103,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"new","desc":"Creates a new Version datatype object.","params":[{"name":"MajorVersion","desc":"The number representing which MajorVersion the new object has.","lua_type":"number"},{"name":"MinorVersion","desc":"The number representing which MinorVersion the new object has.","lua_type":"number"},{"name":"PatchVersion","desc":"The number representing which PatchVersion the new object has.","lua_type":"number"}],"returns":[{"desc":"A new version object.","lua_type":"Version"}],"function_type":"static","source":{"line":114,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"fromString","desc":"Creates a new Version datatype object.","params":[{"name":"String","desc":"A string in the format of \\"[[Version.MajorVersion]].[[Version.MinorVersion]].[[Version.PatchVersion]]\\".","lua_type":"string"}],"returns":[{"desc":"A new version object.","lua_type":"Version"}],"function_type":"static","source":{"line":133,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"getNumbersFromString","desc":"Gets the version numbers from the inputted string and returns them in the order of MajorVersion, MinorVersion, and PatchVersion.","params":[{"name":"String","desc":"A string in the format of \\"[[Version.MajorVersion]].[[Version.MinorVersion]].[[Version.PatchVersion]]\\".","lua_type":"string"}],"returns":[{"desc":"The numbers representing the respective versions (MajorVersion,MinorVersion, and PatchVersion respectively).","lua_type":"number, number, number"}],"function_type":"static","source":{"line":143,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"GetMajorVersion","desc":"Returns the Version\'s Major Version.","params":[],"returns":[{"desc":"[Version.MajorVersion]","lua_type":"number"}],"function_type":"method","source":{"line":159,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"GetMinorVersion","desc":"Returns the Version\'s Minor Version.","params":[],"returns":[{"desc":"[Version.MinorVersion]","lua_type":"number"}],"function_type":"method","source":{"line":168,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"GetPatchVersion","desc":"Returns the Version\'s Patch Version.","params":[],"returns":[{"desc":"[Version.PatchVersion]","lua_type":"number"}],"function_type":"method","source":{"line":177,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"Destroy","desc":"Destroys the object to clean up memory.","params":[],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":184,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}}],"properties":[{"name":"MajorVersion","desc":"The number representing which major version is represented. Different major versions indicate \\"when you make incompatible API changes.\\"","lua_type":"number","source":{"line":16,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"MinorVersion","desc":"The number representing which minor version is represented. Different minor versions indicate \\"when you add functionality in a backwards compatible manner.\\"","lua_type":"number","source":{"line":22,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}},{"name":"PatchVersion","desc":"The number representing which patch version is represented. Different patch versions indicate \\"when you make backwards compatible bug fixes.\\"","lua_type":"number","source":{"line":28,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}}],"types":[],"name":"Version","desc":"A DataType used to format the version number of something, usually files. Set up to adhere to [Semantic Versioning 2.0.0](https://semver.org/).","tags":["DataType"],"realm":["Client","Server"],"source":{"line":10,"path":"src/ServerStorage/ArcaneumEngine/Global/ClassService/BaseClass/DataType/VersionClass.lua"}}')}}]);